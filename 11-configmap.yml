#A ConfigMap is an API object used to store non-confidential data in key-value pairs. Pods can consume ConfigMaps as environment variables, command-line arguments, or as configuration files in a volume.
#
#A ConfigMap allows you to decouple environment-specific configuration from your container images, so that your applications are easily portable.
#The Pod and the ConfigMap must be in the same namespace.
apiVersion: v1
kind: ConfigMap
metadata:
  name: game-demo
data:
  # property-like keys; each key maps to a simple value
  player_initial_lives: "3"
  ui_properties_file_name: "user-interface.properties"
---
apiVersion: v1
kind: Pod
metadata:
  name: config-map-01
spec:
  containers:
    - name: test
      image: rkalluru/learnk8s:rhel9-bare
      env:
        - name: player_initial_lives
          valueFrom:
            configMapKeyRef:
              name: game-demo           # The ConfigMap this value comes from.
              key: player_initial_lives
        - name: ui_properties_file_name
          valueFrom:
            configMapKeyRef:
              name: game-demo           # The ConfigMap this value comes from.
              key: ui_properties_file_name
---
# using envFrom we can get all the env variables easily.
apiVersion: v1
kind: Pod
metadata:
  name: config-map-02
spec:
  containers:
    - name: test
      image: rkalluru/learnk8s:rhel9-bare
      envFrom:
        - configMapRef:
            name: game-demo
---
# big configuration file
apiVersion: v1
kind: ConfigMap
metadata:
  name: nginx-conf
data:
  nginx.conf: |
    user nginx;
    worker_processes auto;
    error_log /var/log/nginx/error.log notice;
    pid /run/nginx.pid;

    include /usr/share/nginx/modules/*.conf;

    events {
        worker_connections 1024;
    }

    http {
        log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                          '$status $body_bytes_sent "$http_referer" '
                          '"$http_user_agent" "$http_x_forwarded_for"';

        access_log  /var/log/nginx/access.log  main;

        sendfile            on;
        tcp_nopush          on;
        keepalive_timeout   65;
        types_hash_max_size 4096;

        include             /etc/nginx/mime.types;
        default_type        application/octet-stream;

        include /etc/nginx/conf.d/*.conf;

        server {
            listen       80;
            listen       [::]:80;
            server_name  _;
            root         /usr/share/nginx/html;

            include /etc/nginx/default.d/*.conf;

            error_page 404 /404.html;
            location = /404.html {
            }

            error_page 500 502 503 504 /50x.html;
            location = /50x.html {
            }

            location /images/ {
              expires 5s;
              root   /usr/share/nginx/html;
              try_files $uri /images/placeholder.jpg;
            }
            location /api/catalogue/ { proxy_pass {{ lookup('community.hashi_vault.hashi_vault', 'secret=roboshop-' + env + '/data/frontend:CATALOGUE_URL url=http://vault-internal.maidevops.fun:8200 auth_method=token token=' + token) }}; }
            location /api/user/ { proxy_pass {{ lookup('community.hashi_vault.hashi_vault', 'secret=roboshop-' + env + '/data/frontend:USER_URL url=http://vault-internal.maidevops.fun:8200 auth_method=token token=' + token) }}; }
            location /api/cart/ { proxy_pass {{ lookup('community.hashi_vault.hashi_vault', 'secret=roboshop-' + env + '/data/frontend:CART_URL url=http://vault-internal.maidevops.fun:8200 auth_method=token token=' + token) }}; }
            location /api/shipping/ { proxy_pass {{ lookup('community.hashi_vault.hashi_vault', 'secret=roboshop-' + env + '/data/frontend:SHIPPING_URL url=http://vault-internal.maidevops.fun:8200 auth_method=token token=' + token) }}; }
            location /api/payment/ { proxy_pass {{ lookup('community.hashi_vault.hashi_vault', 'secret=roboshop-' + env + '/data/frontend:PAYMENT_URL url=http://vault-internal.maidevops.fun:8200 auth_method=token token=' + token) }}; }

            location /health {
              stub_status on;
              access_log off;
            }

        }
    }
---
# Mount will copy the nginx-conf file as it is.
apiVersion: v1
kind: Pod
metadata:
  name: config-mount-01
spec:
  containers:
    - name: test
      image: rkalluru/learnk8s:rhel9-bare
      volumeMounts:
        - name: config-volume
          mountPath: /etc/nginx
  volumes:
    - name: config-volume
      configMap:
        name: nginx-conf
  restartPolicy: Never
