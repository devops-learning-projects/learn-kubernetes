# A Deployment manages a set of Pods to run an application workload, usually one that doesn't maintain state.
# A Deployment provides declarative updates for Pods and ReplicaSets.

#apiVersion: apps/v1
#kind: Deployment
#metadata:
#  name: rs-demo
#  labels:
#    project: example
#    app: nginx
#spec:
#  replicas: 3
#  selector:
#    matchLabels:
#      app: nginx
#  template:
#    metadata:
#      labels:
#        app: nginx
#    spec:
#      containers:
#        - name: nginx
#          image: nginx:1.26

# we can also update deployment from the cli
# $ kubectl set image deployment/rs-demo nginx=nginx:1.16.1

## The rollout gets stuck. You can verify it by checking the rollout status:
# kubectl rollout status deployment/rs-demo --> to roll out the previous version
# kubectl rollout history deployment/rs-demo --> to set rollout history

#To see the details of each revision, run:
# kubectl rollout history deployment/rs-demo  --revision=2
##
# kubectl rollout undo deployment/rs-demo

## replicaset with Proportional scaling
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: nginx
    project: example
  name: rs-demo
  namespace: default
spec:
  MinReadySeconds: 15 # <-- This is the correct location for K8s 1.25+
  replicas: 3
  selector:
    matchLabels:
      app: nginx
  strategy:
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
    type: RollingUpdate
  template:
    metadata:
      labels:
        app: nginx
    spec:
      containers:
        - image: nginx:1.24
          name: nginx