# kubectl label node ip-172-31-27-134.ec2.internal affinity1=one
# kubectl label node ip-172-31-28-215.ec2.internal affinity1=one
#  kubectl label node ip-172-31-46-89.ec2.internal affinity1=one
# nodeSelector is the simplest way to constrain Pods to nodes with specific labels.
# Node affinity is conceptually similar to nodeSelector, allowing you to constrain which nodes your Pod can be scheduled on based on node labels. There are two types of node affinity:
# requiredDuringSchedulingIgnoredDuringExecution ( The scheduler can't schedule the Pod unless the rule is met. This functions like nodeSelector, but with a more expressive syntax.)
# preferredDuringSchedulingIgnoredDuringExecution (The scheduler tries to find a node that meets the rule. If a matching node is not available, the scheduler still schedules the Pod.)

---
apiVersion: v1
kind: Pod
metadata:
  name: with-node-required-affinity
spec:
  containers:
    - name: nginx
      image: nginx:1.14.2
  affinity:
    nodeAffinity:
      requiredDuringSchedulingIgnoredDuringExecution:
        nodeSelectorTerms:
          - matchExpressions:
              - key: affinity1
                operator: In
                values:
                  - "two"
# In this example we set node affinity value as one. and here we used equiredDuringScheduling... that's why if the value does not match, the pod can't be scheduled.

---
apiVersion: v1
kind: Pod
metadata:
  name: with-node-preferred-affinity
spec:
  containers:
    - name: nginx
      image: nginx:1.14.2
  affinity:
    nodeAffinity:
      preferredDuringSchedulingIgnoredDuringExecution:
        - weight: 1
          preference:
            matchExpressions:
              - key: affinity1
                operator: In
                values:
                  - two
#  preferredDuringScheduling... will try to match the value. Even if the value does not match , pod will be scheduled.

